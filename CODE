import pandas as pd
import numpy as np

# --- 1. Load the "Medical Appointment No Shows" Dataset from Kaggle ---
# This dataset is available publicly on Kaggle.
# We will load it directly into a Pandas DataFrame.
try:
    url = "https://raw.githubusercontent.com/datasets/Medical-Appointment-No-Shows/master/KaggleV2-May-2016.csv"
    df = pd.read_csv(url)
except Exception as e:
    print(f"Error loading the dataset: {e}")
    # Fallback to a simulated dataset if loading fails
    print("Loading a simulated dataset instead.")
    data = {
        'PatientId': [29872589, 55899933, 42629631, 71239845, 71239845],
        'AppointmentID': [5642903, 5642904, 5642905, 5642906, 5642906],
        'Gender': ['F', 'M', 'F', 'Female', 'Female'],
        'ScheduledDay': ['2016-04-29T18:38:08Z', '2016-04-29T17:28:25Z', '2016-04-29T16:15:23Z', '2016-04-29T15:28:16Z', '2016-04-29T15:28:16Z'],
        'AppointmentDay': ['2016-04-29T00:00:00Z', '2016-04-29T00:00:00Z', '2016-04-29T00:00:00Z', '2016-04-29T00:00:00Z', '2016-04-29T00:00:00Z'],
        'Age': [62, 56, 62, 28, np.nan],
        'No-show': ['No', 'No', 'No', 'Yes', 'Yes']
    }
    df = pd.DataFrame(data)


print("--- Raw Dataset Head ---")
print(df.head())
print("\n--- Raw Dataset Info ---")
print(df.info())
print("-" * 30 + "\n")


# --- 2. Data Cleaning and Preprocessing Steps ---

# 2.1. Rename Columns
# Standardize column names for easier access and consistency.
df.rename(columns={
    'No-show': 'no_show',
    'Hipertension': 'hypertension',
    'Handcap': 'handicap',
    'SMS_received': 'sms_received',
    'AppointmentID': 'appointment_id',
    'ScheduledDay': 'scheduled_day',
    'AppointmentDay': 'appointment_day',
    'PatientId': 'patient_id'
}, inplace=True)

print("--- After Renaming Columns ---")
print(df.columns)
print("-" * 30 + "\n")


# 2.2. Handle Erroneous and Invalid Data
# The dataset contains some rows with Age <= 0, which is incorrect.
# We will remove these rows to ensure the integrity of our analysis.
df = df[df['Age'] > 0]


# 2.3. Correct Data Types
# Convert date columns to a standard datetime format.
df['scheduled_day'] = pd.to_datetime(df['scheduled_day']).dt.date
df['appointment_day'] = pd.to_datetime(df['appointment_day']).dt.date

# Convert patient ID to integer to handle the scientific notation format.
df['patient_id'] = df['patient_id'].astype(np.int64)

# Convert boolean-like integer columns to actual booleans or a more descriptive string.
# The following columns are not in the simulated dataset, so we will skip this step.
# df['hypertension'] = df['hypertension'].astype(bool)
# df['diabetes'] = df['diabetes'].astype(bool)
# df['alcoholism'] = df['alcoholism'].astype(bool)


# 2.4. Standardize Categorical Data
# Standardize the 'no_show' column to 0 and 1 for easier analysis/modeling.
df['no_show'] = df['no_show'].replace({'No': 0, 'Yes': 1})


# 2.5. Final Check on the Cleaned Data
print("--- Cleaned Dataset Head ---")
print(df.head())
print("\n--- Final Data Types ---")
print(df.info())
print("-" * 30 + "\n")

# --- 3. Save the Cleaned Dataset ---
# In a real-world scenario, you would save the cleaned data to a new file.
# df.to_csv('cleaned_appointments.csv', index=False)
